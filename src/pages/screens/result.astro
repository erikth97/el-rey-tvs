---
// src/pages/result.astro
---

<html lang="es">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Resultados del análisis de documento con IA" />
    <title>Resultados - Document AI</title>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <div class="container mx-auto px-4 py-8 max-w-6xl">
        <!-- Header -->
        <div class="text-center mb-8">
            <div class="w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-600 rounded-xl mx-auto mb-4 flex items-center justify-center">
                <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </div>
            <h1 class="text-3xl md:text-4xl font-bold text-gray-800 mb-2">
                ¡Análisis Completado!
            </h1>
            <p class="text-gray-600" id="resultSummary">
                Hemos extraído la información de tu documento
            </p>
        </div>

        <!-- Results Container -->
        <div class="grid lg:grid-cols-3 gap-8 mb-8">
            <!-- Image Preview -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-xl p-6 shadow-lg sticky top-8">
                    <h3 class="font-semibold text-gray-800 mb-4 flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                        Documento Procesado
                    </h3>
                    
                    <div class="aspect-square bg-gray-100 rounded-lg overflow-hidden mb-4">
                        <img id="processedImage" class="w-full h-full object-contain" alt="Documento procesado" />
                    </div>

                    <!-- Confidence Score -->
                    <div class="bg-gray-50 rounded-lg p-4">
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-sm font-medium text-gray-700">Confianza del análisis</span>
                            <span id="confidencePercent" class="text-sm font-bold text-green-600">--</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div id="confidenceBar" class="bg-gradient-to-r from-green-500 to-emerald-600 h-2 rounded-full transition-all duration-1000" style="width: 0%"></div>
                        </div>
                        <p class="text-xs text-gray-500 mt-2" id="confidenceDescription">
                            Calculando confianza...
                        </p>
                    </div>
                </div>
            </div>

            <!-- Extracted Data -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-xl p-6 shadow-lg">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="font-semibold text-gray-800 text-xl flex items-center">
                            <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            Información Extraída
                        </h3>
                        
                        <div class="flex space-x-2">
                            <button id="copyAllBtn" class="text-blue-600 hover:text-blue-800 transition-colors text-sm font-medium">
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                </svg>
                                Copiar todo
                            </button>
                            
                            <button id="exportBtn" class="text-green-600 hover:text-green-800 transition-colors text-sm font-medium">
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                                Exportar JSON
                            </button>
                        </div>
                    </div>

                    <!-- Loading State -->
                    <div id="dataLoading" class="text-center py-12">
                        <div class="animate-spin w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full mx-auto mb-4"></div>
                        <p class="text-gray-600">Cargando datos extraídos...</p>
                    </div>

                    <!-- Data Fields -->
                    <div id="extractedData" class="hidden space-y-4">
                        <!-- Los campos se generarán dinámicamente -->
                    </div>

                    <!-- Error State -->
                    <div id="dataError" class="hidden text-center py-12">
                        <svg class="w-12 h-12 text-red-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                        <p class="text-gray-600 mb-2">No se pudieron cargar los resultados</p>
                        <button id="retryBtn" class="text-blue-600 hover:text-blue-800 font-medium">
                            Intentar de nuevo
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Processing Stats -->
        <div class="bg-white rounded-xl p-6 shadow-lg mb-8">
            <h3 class="font-semibold text-gray-800 mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                Estadísticas del Procesamiento
            </h3>
            
            <div class="grid md:grid-cols-4 gap-6">
                <div class="text-center">
                    <div class="text-2xl font-bold text-blue-600" id="processingTime">--</div>
                    <div class="text-sm text-gray-600">Tiempo de procesamiento</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-green-600" id="fieldsFound">--</div>
                    <div class="text-sm text-gray-600">Campos detectados</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-purple-600" id="documentTypeDisplay">--</div>
                    <div class="text-sm text-gray-600">Tipo de documento</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-orange-600" id="processedDate">--</div>
                    <div class="text-sm text-gray-600">Fecha de análisis</div>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
            <button 
                id="newAnalysisBtn"
                class="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
            >
                <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Analizar Otro Documento
            </button>
            
            <button 
                id="shareBtn"
                class="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300"
            >
                <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
                </svg>
                Compartir Resultados
            </button>
            
            <button 
                id="downloadBtn"
                class="bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300"
            >
                <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Descargar PDF
            </button>
        </div>
    </div>

    <script type="module">
        // Importar sistemas de navegación y storage
        import { navigationManager, getNavigationData } from '/src/utils/helpers/navigation.js';
        import { storage, getAnalysisResult } from '/src/utils/helpers/storage.js';

        document.addEventListener('DOMContentLoaded', function() {
            // Elementos del DOM
            const processedImage = document.getElementById('processedImage');
            const confidenceBar = document.getElementById('confidenceBar');
            const confidencePercent = document.getElementById('confidencePercent');
            const confidenceDescription = document.getElementById('confidenceDescription');
            const dataLoading = document.getElementById('dataLoading');
            const extractedData = document.getElementById('extractedData');
            const dataError = document.getElementById('dataError');
            const resultSummary = document.getElementById('resultSummary');

            // Elementos de estadísticas
            const processingTime = document.getElementById('processingTime');
            const fieldsFound = document.getElementById('fieldsFound');
            const documentTypeDisplay = document.getElementById('documentTypeDisplay');
            const processedDate = document.getElementById('processedDate');

            // Botones de acción
            const copyAllBtn = document.getElementById('copyAllBtn');
            const exportBtn = document.getElementById('exportBtn');
            const newAnalysisBtn = document.getElementById('newAnalysisBtn');
            const shareBtn = document.getElementById('shareBtn');
            const downloadBtn = document.getElementById('downloadBtn');
            const retryBtn = document.getElementById('retryBtn');

            // Cargar y mostrar resultados
            loadResults();

            function loadResults() {
                try {
                    // Obtener datos del análisis
                    const analysisResult = getAnalysisResult();
                    const capturedImage = getNavigationData('capturedImage');

                    if (!analysisResult) {
                        throw new Error('No se encontraron resultados del análisis');
                    }

                    // Mostrar imagen procesada
                    if (capturedImage) {
                        processedImage.src = capturedImage;
                    }

                    // Mostrar confianza
                    const confidence = Math.round(analysisResult.confidence * 100);
                    updateConfidence(confidence);

                    // Mostrar datos extraídos
                    displayExtractedData(analysisResult.extractedData);

                    // Mostrar estadísticas
                    displayStats(analysisResult);

                    // Ocultar loading y mostrar datos
                    dataLoading.classList.add('hidden');
                    extractedData.classList.remove('hidden');

                    console.log('✅ Resultados cargados exitosamente');

                } catch (error) {
                    console.error('❌ Error cargando resultados:', error);
                    showError();
                }
            }

            function updateConfidence(confidence) {
                confidenceBar.style.width = `${confidence}%`;
                confidencePercent.textContent = `${confidence}%`;

                // Descripción según confianza
                let description = '';
                let colorClass = '';

                if (confidence >= 90) {
                    description = 'Excelente - Datos muy confiables';
                    colorClass = 'text-green-600';
                } else if (confidence >= 75) {
                    description = 'Bueno - Datos confiables';
                    colorClass = 'text-blue-600';
                } else if (confidence >= 60) {
                    description = 'Regular - Revisar datos manualmente';
                    colorClass = 'text-yellow-600';
                } else {
                    description = 'Bajo - Verificar datos requerido';
                    colorClass = 'text-red-600';
                }

                confidenceDescription.textContent = description;
                confidenceDescription.className = `text-xs mt-2 ${colorClass}`;
            }

            function displayExtractedData(data) {
                extractedData.innerHTML = '';

                Object.entries(data).forEach(([key, value]) => {
                    const fieldElement = createDataField(key, value);
                    extractedData.appendChild(fieldElement);
                });
            }

            function createDataField(label, value) {
                const fieldDiv = document.createElement('div');
                fieldDiv.className = 'border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors';

                fieldDiv.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <label class="block text-sm font-medium text-gray-700 mb-1">${label}</label>
                            <div class="text-gray-900 font-mono text-sm bg-gray-100 px-3 py-2 rounded border">${value}</div>
                        </div>
                        <button class="copy-field-btn ml-4 text-gray-400 hover:text-blue-600 transition-colors" data-value="${value}" title="Copiar campo">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                            </svg>
                        </button>
                    </div>
                `;

                // Agregar evento de copia para este campo
                const copyBtn = fieldDiv.querySelector('.copy-field-btn');
                copyBtn.addEventListener('click', () => copyToClipboard(value));

                return fieldDiv;
            }

            function displayStats(analysisResult) {
                // Tiempo de procesamiento
                const timeInSeconds = (analysisResult.processingTime / 1000).toFixed(1);
                processingTime.textContent = `${timeInSeconds}s`;

                // Campos encontrados
                fieldsFound.textContent = analysisResult.fieldsFound || Object.keys(analysisResult.extractedData).length;

                // Tipo de documento
                const typeNames = {
                    'id': 'Identificación',
                    'invoice': 'Factura', 
                    'receipt': 'Recibo',
                    'document': 'Documento'
                };
                documentTypeDisplay.textContent = typeNames[analysisResult.documentType] || 'Documento';

                // Fecha de procesamiento
                const processDate = new Date(analysisResult.timestamp);
                processedDate.textContent = processDate.toLocaleDateString('es-MX');

                // Actualizar resumen
                const fieldsCount = Object.keys(analysisResult.extractedData).length;
                resultSummary.textContent = `Se extrajeron ${fieldsCount} campos de tu ${typeNames[analysisResult.documentType]?.toLowerCase() || 'documento'}`;
            }

            function showError() {
                dataLoading.classList.add('hidden');
                dataError.classList.remove('hidden');
            }

            // Funciones de utilidad

            async function copyToClipboard(text) {
                try {
                    await navigator.clipboard.writeText(text);
                    showNotification('¡Copiado al portapapeles!', 'success');
                } catch (error) {
                    console.error('Error al copiar:', error);
                    showNotification('Error al copiar', 'error');
                }
            }

            function showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white font-medium transition-all duration-300 transform translate-x-full`;
                
                if (type === 'success') {
                    notification.classList.add('bg-green-500');
                } else if (type === 'error') {
                    notification.classList.add('bg-red-500');
                } else {
                    notification.classList.add('bg-blue-500');
                }

                notification.textContent = message;
                document.body.appendChild(notification);

                // Animar entrada
                setTimeout(() => {
                    notification.classList.remove('translate-x-full');
                }, 100);

                // Animar salida y remover
                setTimeout(() => {
                    notification.classList.add('translate-x-full');
                    setTimeout(() => {
                        document.body.removeChild(notification);
                    }, 300);
                }, 3000);
            }

            // Event listeners para botones

            copyAllBtn.addEventListener('click', async function() {
                const analysisResult = getAnalysisResult();
                if (analysisResult) {
                    const textToCopy = Object.entries(analysisResult.extractedData)
                        .map(([key, value]) => `${key}: ${value}`)
                        .join('\n');
                    
                    await copyToClipboard(textToCopy);
                }
            });

            exportBtn.addEventListener('click', function() {
                const analysisResult = getAnalysisResult();
                if (analysisResult) {
                    const dataStr = JSON.stringify(analysisResult, null, 2);
                    const dataBlob = new Blob([dataStr], { type: 'application/json' });
                    const url = URL.createObjectURL(dataBlob);
                    
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = `documento_analisis_${new Date().toISOString().slice(0, 10)}.json`;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                    
                    showNotification('Archivo JSON descargado', 'success');
                }
            });

            newAnalysisBtn.addEventListener('click', function() {
                // Limpiar datos de la sesión actual pero mantener preferencias
                storage.clearSessionData();
                
                // Navegar al inicio
                window.location.href = '/';
            });

            shareBtn.addEventListener('click', async function() {
                const analysisResult = getAnalysisResult();
                if (analysisResult && navigator.share) {
                    try {
                        await navigator.share({
                            title: 'Resultados de Document AI',
                            text: `Análisis completado de ${analysisResult.documentType} con ${Object.keys(analysisResult.extractedData).length} campos extraídos`,
                            url: window.location.href
                        });
                        showNotification('Compartido exitosamente', 'success');
                    } catch (error) {
                        console.log('Share cancelled or failed');
                        fallbackShare();
                    }
                } else {
                    fallbackShare();
                }
            });

            function fallbackShare() {
                const analysisResult = getAnalysisResult();
                if (analysisResult) {
                    const shareText = `Análisis de documento completado:\n\n${Object.entries(analysisResult.extractedData).map(([key, value]) => `${key}: ${value}`).join('\n')}`;
                    copyToClipboard(shareText);
                    showNotification('Resultados copiados al portapapeles para compartir', 'info');
                }
            }

            downloadBtn.addEventListener('click', function() {
                generatePDFReport();
            });

            function generatePDFReport() {
                const analysisResult = getAnalysisResult();
                if (!analysisResult) {
                    showNotification('No hay datos para generar PDF', 'error');
                    return;
                }

                // Crear contenido HTML para el PDF
                const reportContent = `
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <meta charset="utf-8">
                        <title>Reporte de Análisis - Document AI</title>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 40px; color: #333; }
                            .header { text-align: center; margin-bottom: 30px; }
                            .logo { color: #3B82F6; font-size: 24px; font-weight: bold; }
                            .title { font-size: 20px; margin: 10px 0; }
                            .subtitle { color: #666; margin-bottom: 20px; }
                            .info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px; }
                            .info-card { border: 1px solid #ddd; padding: 15px; border-radius: 8px; }
                            .info-title { font-weight: bold; color: #374151; margin-bottom: 10px; }
                            .data-section { margin-bottom: 30px; }
                            .data-item { margin-bottom: 15px; padding: 10px; background: #f9f9f9; border-radius: 5px; }
                            .data-label { font-weight: bold; color: #374151; }
                            .data-value { margin-top: 5px; font-family: monospace; }
                            .footer { margin-top: 40px; text-align: center; color: #666; font-size: 12px; }
                            .confidence { text-align: center; margin: 20px 0; }
                            .confidence-bar { width: 100%; height: 20px; background: #e5e5e5; border-radius: 10px; overflow: hidden; }
                            .confidence-fill { height: 100%; background: linear-gradient(to right, #10B981, #059669); }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <div class="logo">Document AI</div>
                            <h1 class="title">Reporte de Análisis de Documento</h1>
                            <p class="subtitle">Generado el ${new Date().toLocaleDateString('es-MX', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
                        </div>

                        <div class="info-grid">
                            <div class="info-card">
                                <div class="info-title">Información del Procesamiento</div>
                                <p><strong>Tipo:</strong> ${getDocumentTypeName(analysisResult.documentType)}</p>
                                <p><strong>Tiempo:</strong> ${(analysisResult.processingTime / 1000).toFixed(1)} segundos</p>
                                <p><strong>Campos detectados:</strong> ${Object.keys(analysisResult.extractedData).length}</p>
                            </div>
                            <div class="info-card">
                                <div class="confidence">
                                    <div class="info-title">Confianza del Análisis</div>
                                    <div style="font-size: 24px; font-weight: bold; color: #10B981; margin: 10px 0;">
                                        ${Math.round(analysisResult.confidence * 100)}%
                                    </div>
                                    <div class="confidence-bar">
                                        <div class="confidence-fill" style="width: ${analysisResult.confidence * 100}%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="data-section">
                            <h2>Información Extraída</h2>
                            ${Object.entries(analysisResult.extractedData).map(([key, value]) => `
                                <div class="data-item">
                                    <div class="data-label">${key}</div>
                                    <div class="data-value">${value}</div>
                                </div>
                            `).join('')}
                        </div>

                        <div class="footer">
                            <p>Este reporte fue generado automáticamente por Document AI</p>
                            <p>Tecnología de análisis de documentos con inteligencia artificial</p>
                        </div>
                    </body>
                    </html>
                `;

                // Crear ventana para imprimir/guardar como PDF
                const printWindow = window.open('', '_blank');
                printWindow.document.write(reportContent);
                printWindow.document.close();
                
                // Dar tiempo para que se cargue el contenido
                setTimeout(() => {
                    printWindow.print();
                    showNotification('Abriendo diálogo de impresión/PDF', 'info');
                }, 500);
            }

            function getDocumentTypeName(type) {
                const names = {
                    'id': 'Identificación',
                    'invoice': 'Factura',
                    'receipt': 'Recibo',
                    'document': 'Documento'
                };
                return names[type] || 'Documento';
            }

            retryBtn.addEventListener('click', function() {
                dataError.classList.add('hidden');
                dataLoading.classList.remove('hidden');
                
                setTimeout(() => {
                    loadResults();
                }, 1000);
            });

            console.log('🎉 Results page initialized');
        });
    </script>

    <style>
        /* Animaciones personalizadas */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .animate-fade-in {
            animation: fadeIn 0.6s ease-out;
        }

        /* Mejoras de accesibilidad y UX */
        button:focus {
            outline: 2px solid #3B82F6;
            outline-offset: 2px;
        }

        .copy-field-btn:hover {
            transform: scale(1.1);
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .lg\\:col-span-1,
            .lg\\:col-span-2 {
                grid-column: span 1;
            }
        }

        /* Print styles */
        @media print {
            body {
                background: white !important;
            }
            
            .bg-gradient-to-br {
                background: white !important;
            }
            
            button {
                display: none !important;
            }
        }
    </style>
</body>
</html>