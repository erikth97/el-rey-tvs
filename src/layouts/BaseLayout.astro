---
export interface Props {
  title?: string;
  description?: string;
  image?: string;
  canonicalURL?: string;
}

const {
  title = 'El Rey TVS - Así se ve un Rey',
  description = 'Webapp interactiva para generar imágenes personalizadas con motocarros TVS. Descubre tu versión Rey.',
  image = '/assets/images/og-image.png',
  canonicalURL = new URL(Astro.url.pathname, Astro.site)
} = Astro.props;

const fullTitle = title.includes('El Rey TVS') ? title : `${title} | El Rey TVS`;
---

<!DOCTYPE html>
<html lang="es" class="h-full">
  <head>
    <meta charset="UTF-8" />
    
    <!-- Viewport optimizado para mobile -->
    <meta 
      name="viewport" 
      content="width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover" 
    />
    
    <!-- Meta básico -->
    <title>{fullTitle}</title>
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Favicons y iconos -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    
    <!-- PWA Meta -->
    <meta name="theme-color" content="#E31E24" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="apple-mobile-web-app-title" content="El Rey TVS" />
    
    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:site_name" content="El Rey TVS" />
    <meta property="og:locale" content="es_MX" />
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={fullTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(image, Astro.url)} />
    
    <!-- Preload de recursos críticos -->
    <link rel="preload" href="/assets/fonts/Chunky-Retro-Demo.ttf" as="font" type="font/truetype" crossorigin="anonymous" />
    <link rel="preload" href="/assets/images/hero-el-rey.png" as="image" />
    
    <!-- Estilos críticos inline -->
    <style>
      /* Reset básico para eliminar FOUC */
      html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        background-color: #000;
        font-family: system-ui, -apple-system, sans-serif;
        overflow-x: hidden;
      }
      
      /* Loading spinner para transiciones */
      .page-loading {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: #000;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
      }
      
      .loading-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-top: 3px solid #E31E24;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    </style>
  </head>
  
  <body class="h-full bg-black text-white antialiased">
    <!-- Loading overlay inicial -->
    <div id="page-loading" class="page-loading">
      <div class="loading-spinner"></div>
    </div>
    
    <!-- Contenido principal -->
    <main class="relative w-full h-full">
      <slot />
    </main>
    
    <!-- Scripts críticos -->
    <script>
      // Remover loading spinner cuando la página esté lista
      document.addEventListener('DOMContentLoaded', () => {
        const loadingElement = document.getElementById('page-loading');
        if (loadingElement) {
          setTimeout(() => {
            loadingElement.style.opacity = '0';
            setTimeout(() => {
              loadingElement.remove();
            }, 300);
          }, 500);
        }
      });
      
      // Performance monitoring básico
      window.addEventListener('load', () => {
        if ('performance' in window) {
          const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
          console.log(`Page load time: ${loadTime}ms`);
        }
      });
    </script>
  </body>
</html>